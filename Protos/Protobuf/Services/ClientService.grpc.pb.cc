// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: Services/ClientService.proto

#include "Services/ClientService.pb.h"
#include "Services/ClientService.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace GrpcProject {
namespace Protos {
namespace Services {

static const char* ClientService_method_names[] = {
  "/GrpcProject.Protos.Services.ClientService/CreateClient",
  "/GrpcProject.Protos.Services.ClientService/ListClient",
  "/GrpcProject.Protos.Services.ClientService/InvoiceClient",
};

std::unique_ptr< ClientService::Stub> ClientService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ClientService::Stub> stub(new ClientService::Stub(channel, options));
  return stub;
}

ClientService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_CreateClient_(ClientService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListClient_(ClientService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_InvoiceClient_(ClientService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ClientService::Stub::CreateClient(::grpc::ClientContext* context, const ::GrpcProject::Protos::Models::Client& request, ::GrpcProject::Protos::Helpers::ServiceStatus* response) {
  return ::grpc::internal::BlockingUnaryCall< ::GrpcProject::Protos::Models::Client, ::GrpcProject::Protos::Helpers::ServiceStatus, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateClient_, context, request, response);
}

void ClientService::Stub::async::CreateClient(::grpc::ClientContext* context, const ::GrpcProject::Protos::Models::Client* request, ::GrpcProject::Protos::Helpers::ServiceStatus* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::GrpcProject::Protos::Models::Client, ::GrpcProject::Protos::Helpers::ServiceStatus, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateClient_, context, request, response, std::move(f));
}

void ClientService::Stub::async::CreateClient(::grpc::ClientContext* context, const ::GrpcProject::Protos::Models::Client* request, ::GrpcProject::Protos::Helpers::ServiceStatus* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateClient_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GrpcProject::Protos::Helpers::ServiceStatus>* ClientService::Stub::PrepareAsyncCreateClientRaw(::grpc::ClientContext* context, const ::GrpcProject::Protos::Models::Client& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::GrpcProject::Protos::Helpers::ServiceStatus, ::GrpcProject::Protos::Models::Client, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateClient_, context, request);
}

::grpc::ClientAsyncResponseReader< ::GrpcProject::Protos::Helpers::ServiceStatus>* ClientService::Stub::AsyncCreateClientRaw(::grpc::ClientContext* context, const ::GrpcProject::Protos::Models::Client& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateClientRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ClientService::Stub::ListClient(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::GrpcProject::Protos::Models::ListClientResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::GrpcProject::Protos::Models::ListClientResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ListClient_, context, request, response);
}

void ClientService::Stub::async::ListClient(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::GrpcProject::Protos::Models::ListClientResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::GrpcProject::Protos::Models::ListClientResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListClient_, context, request, response, std::move(f));
}

void ClientService::Stub::async::ListClient(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::GrpcProject::Protos::Models::ListClientResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListClient_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GrpcProject::Protos::Models::ListClientResponse>* ClientService::Stub::PrepareAsyncListClientRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::GrpcProject::Protos::Models::ListClientResponse, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ListClient_, context, request);
}

::grpc::ClientAsyncResponseReader< ::GrpcProject::Protos::Models::ListClientResponse>* ClientService::Stub::AsyncListClientRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListClientRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ClientService::Stub::InvoiceClient(::grpc::ClientContext* context, const ::GrpcProject::Protos::Models::ClientId& request, ::GrpcProject::Protos::Models::Invoice* response) {
  return ::grpc::internal::BlockingUnaryCall< ::GrpcProject::Protos::Models::ClientId, ::GrpcProject::Protos::Models::Invoice, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_InvoiceClient_, context, request, response);
}

void ClientService::Stub::async::InvoiceClient(::grpc::ClientContext* context, const ::GrpcProject::Protos::Models::ClientId* request, ::GrpcProject::Protos::Models::Invoice* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::GrpcProject::Protos::Models::ClientId, ::GrpcProject::Protos::Models::Invoice, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_InvoiceClient_, context, request, response, std::move(f));
}

void ClientService::Stub::async::InvoiceClient(::grpc::ClientContext* context, const ::GrpcProject::Protos::Models::ClientId* request, ::GrpcProject::Protos::Models::Invoice* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_InvoiceClient_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GrpcProject::Protos::Models::Invoice>* ClientService::Stub::PrepareAsyncInvoiceClientRaw(::grpc::ClientContext* context, const ::GrpcProject::Protos::Models::ClientId& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::GrpcProject::Protos::Models::Invoice, ::GrpcProject::Protos::Models::ClientId, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_InvoiceClient_, context, request);
}

::grpc::ClientAsyncResponseReader< ::GrpcProject::Protos::Models::Invoice>* ClientService::Stub::AsyncInvoiceClientRaw(::grpc::ClientContext* context, const ::GrpcProject::Protos::Models::ClientId& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncInvoiceClientRaw(context, request, cq);
  result->StartCall();
  return result;
}

ClientService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ClientService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ClientService::Service, ::GrpcProject::Protos::Models::Client, ::GrpcProject::Protos::Helpers::ServiceStatus, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ClientService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::GrpcProject::Protos::Models::Client* req,
             ::GrpcProject::Protos::Helpers::ServiceStatus* resp) {
               return service->CreateClient(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ClientService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ClientService::Service, ::google::protobuf::Empty, ::GrpcProject::Protos::Models::ListClientResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ClientService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::GrpcProject::Protos::Models::ListClientResponse* resp) {
               return service->ListClient(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ClientService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ClientService::Service, ::GrpcProject::Protos::Models::ClientId, ::GrpcProject::Protos::Models::Invoice, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ClientService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::GrpcProject::Protos::Models::ClientId* req,
             ::GrpcProject::Protos::Models::Invoice* resp) {
               return service->InvoiceClient(ctx, req, resp);
             }, this)));
}

ClientService::Service::~Service() {
}

::grpc::Status ClientService::Service::CreateClient(::grpc::ServerContext* context, const ::GrpcProject::Protos::Models::Client* request, ::GrpcProject::Protos::Helpers::ServiceStatus* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ClientService::Service::ListClient(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::GrpcProject::Protos::Models::ListClientResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ClientService::Service::InvoiceClient(::grpc::ServerContext* context, const ::GrpcProject::Protos::Models::ClientId* request, ::GrpcProject::Protos::Models::Invoice* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace GrpcProject
}  // namespace Protos
}  // namespace Services

