// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: Services/ProductService.proto

#include "Services/ProductService.pb.h"
#include "Services/ProductService.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace GrpcProject {
namespace Protos {
namespace Services {

static const char* ProductService_method_names[] = {
  "/GrpcProject.Protos.Services.ProductService/CreateProduct",
  "/GrpcProject.Protos.Services.ProductService/ListProduct",
};

std::unique_ptr< ProductService::Stub> ProductService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ProductService::Stub> stub(new ProductService::Stub(channel, options));
  return stub;
}

ProductService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_CreateProduct_(ProductService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListProduct_(ProductService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ProductService::Stub::CreateProduct(::grpc::ClientContext* context, const ::GrpcProject::Protos::Models::Product& request, ::GrpcProject::Protos::Helpers::ServiceStatus* response) {
  return ::grpc::internal::BlockingUnaryCall< ::GrpcProject::Protos::Models::Product, ::GrpcProject::Protos::Helpers::ServiceStatus, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateProduct_, context, request, response);
}

void ProductService::Stub::async::CreateProduct(::grpc::ClientContext* context, const ::GrpcProject::Protos::Models::Product* request, ::GrpcProject::Protos::Helpers::ServiceStatus* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::GrpcProject::Protos::Models::Product, ::GrpcProject::Protos::Helpers::ServiceStatus, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateProduct_, context, request, response, std::move(f));
}

void ProductService::Stub::async::CreateProduct(::grpc::ClientContext* context, const ::GrpcProject::Protos::Models::Product* request, ::GrpcProject::Protos::Helpers::ServiceStatus* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateProduct_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GrpcProject::Protos::Helpers::ServiceStatus>* ProductService::Stub::PrepareAsyncCreateProductRaw(::grpc::ClientContext* context, const ::GrpcProject::Protos::Models::Product& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::GrpcProject::Protos::Helpers::ServiceStatus, ::GrpcProject::Protos::Models::Product, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateProduct_, context, request);
}

::grpc::ClientAsyncResponseReader< ::GrpcProject::Protos::Helpers::ServiceStatus>* ProductService::Stub::AsyncCreateProductRaw(::grpc::ClientContext* context, const ::GrpcProject::Protos::Models::Product& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateProductRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ProductService::Stub::ListProduct(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::GrpcProject::Protos::Models::ListProductResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::GrpcProject::Protos::Models::ListProductResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ListProduct_, context, request, response);
}

void ProductService::Stub::async::ListProduct(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::GrpcProject::Protos::Models::ListProductResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::GrpcProject::Protos::Models::ListProductResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListProduct_, context, request, response, std::move(f));
}

void ProductService::Stub::async::ListProduct(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::GrpcProject::Protos::Models::ListProductResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListProduct_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GrpcProject::Protos::Models::ListProductResponse>* ProductService::Stub::PrepareAsyncListProductRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::GrpcProject::Protos::Models::ListProductResponse, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ListProduct_, context, request);
}

::grpc::ClientAsyncResponseReader< ::GrpcProject::Protos::Models::ListProductResponse>* ProductService::Stub::AsyncListProductRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListProductRaw(context, request, cq);
  result->StartCall();
  return result;
}

ProductService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ProductService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ProductService::Service, ::GrpcProject::Protos::Models::Product, ::GrpcProject::Protos::Helpers::ServiceStatus, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ProductService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::GrpcProject::Protos::Models::Product* req,
             ::GrpcProject::Protos::Helpers::ServiceStatus* resp) {
               return service->CreateProduct(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ProductService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ProductService::Service, ::google::protobuf::Empty, ::GrpcProject::Protos::Models::ListProductResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ProductService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::GrpcProject::Protos::Models::ListProductResponse* resp) {
               return service->ListProduct(ctx, req, resp);
             }, this)));
}

ProductService::Service::~Service() {
}

::grpc::Status ProductService::Service::CreateProduct(::grpc::ServerContext* context, const ::GrpcProject::Protos::Models::Product* request, ::GrpcProject::Protos::Helpers::ServiceStatus* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ProductService::Service::ListProduct(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::GrpcProject::Protos::Models::ListProductResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace GrpcProject
}  // namespace Protos
}  // namespace Services

